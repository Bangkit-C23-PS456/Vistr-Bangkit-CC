// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  firebaseId      String
  name            String
  email           String           @unique
  created_at      DateTime         @default(now())
  user_preference UserPreference[]
}

model UserPreference {
  id             Int      @id @default(autoincrement())
  user_id        Int
  user           User     @relation(fields: [user_id], references: [id],onDelete:Cascade )
  place_activity Place_Activity
  place_category UserPlaceCategory[]
  city           String
  latitude       Int
  longitude      Int
  createdAt      DateTime @default(now())
}

enum Place_Activity {
  OUTDOOR
  INDOOR
}

model UserPlaceCategory {
  id             Int      @id @default(autoincrement())
  name String
  user_pref UserPreference @relation(fields: [user_prefId],references: [id],onDelete: Cascade)
  user_prefId Int
}

model Place {
  id           Int             @id @default(autoincrement())
  place_name   String
  description  String          @db.Text
  activity     String
  min_price    Int
  max_price    Int
  rating       Int
  latitude     Float
  longitude    Float
  openingHours OpeningHours[]
  categories   PlaceCategory[]
  photos       Photo[]
  city         City?           @relation(fields: [cityId], references: [id])
  cityId       Int?
}

model Photo {
  id      Int    @id @default(autoincrement())
  placeId Int
  width   String
  height  String
  url     String
  place   Place  @relation(fields: [placeId], references: [id],onDelete: Cascade)
}

model OpeningHours {
  id        Int    @id @default(autoincrement())
  day       String
  openTime  Int
  closeTime Int
  place     Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId   Int
}

model Category {
  id     Int             @id @default(autoincrement())
  name   String          @unique
  places PlaceCategory[]
}

model PlaceCategory {
  place      Place    @relation(fields: [placeId], references: [id],onDelete: Cascade)
  placeId    Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([placeId, categoryId])
}

model City {
  id     Int     @id @default(autoincrement())
  name   String @unique
  places Place[]
}
